version: '3.8'

services:
  # PostgreSQL数据库
  db:
    image: postgres:13-alpine
    container_name: sms-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sms_forwarding_db
      POSTGRES_USER: sms_user
      POSTGRES_PASSWORD: sms_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - sms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sms_user -d sms_forwarding_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存（可选，用于会话存储和缓存）
  redis:
    image: redis:7-alpine
    container_name: sms-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # SMS转发管理系统主应用
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sms-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://sms_user:sms_password@db:5432/sms_forwarding_db
      
      # 应用配置
      APP_NAME: SMS转发管理系统
      DEBUG: "false"
      
      # 安全配置
      SECRET_KEY: your-super-secret-key-change-in-production-min-32-characters
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # 服务器配置
      HOST: 0.0.0.0
      PORT: 8000
      
      # 心跳和监控配置
      HEARTBEAT_INTERVAL: 10
      OFFLINE_THRESHOLD: 30
      
      # 验证码配置
      VERIFICATION_CODE_INTERVAL: 10
      MAX_VERIFICATION_ATTEMPTS: 5
      MAX_ACCESS_ATTEMPTS: 5
      
      # CORS配置
      ALLOWED_ORIGINS: http://localhost:8000,http://127.0.0.1:8000,http://localhost:3000
      
      # Redis配置（可选）
      REDIS_URL: redis://redis:6379/0
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - sms-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx反向代理（可选，用于生产环境）
  nginx:
    image: nginx:alpine
    container_name: sms-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      # SSL证书目录（如果使用HTTPS）
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - sms-network
    depends_on:
      - app
    profiles:
      - production  # 只在生产环境启用

# 数据卷定义
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

# 网络定义
networks:
  sms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
